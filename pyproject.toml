[tool.poetry]
name = "matrixctl"
version = "0.12.0-beta.2"
description = "Control, manage, provision and deploy matrix homeservers."

license = "GPL-3.0-or-later"
readme = "README.md"
repository = "https://github.com/MichaelSasser/matrixctl"
homepage = "https://michaelsasser.github.io/matrixctl/index.html"
documentation = "https://michaelsasser.github.io/matrixctl/index.html"
keywords = ['Matrix', 'Synapse', 'Docker', 'OCI-Container']
authors = ["Michael Sasser <Michael@MichaelSasser.org>"]
maintainers = ["Michael Sasser <Michael@MichaelSasser.org>"]
# Look here for all Classifiers:
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Other Audience",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: POSIX",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Topic :: Utilities",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"
GitPython = "^3.1.28"
coloredlogs = "^15.0.1"
paramiko = "^2.11.0"
"ruamel.yaml" = "^0.17.21"
ansible-runner = ">=1.4.7,<3.0.0"
attrs = "^22.1.0"
xdg = "^5.1.1"
Jinja2 = "^3.1.2"
psycopg = "^3.1.3"
httpx = { version = "^0.23", extras = ["http2"] }
sshtunnel = "^0.4.0"

# Optional:
sphinx = { version = "^5.2.3", optional = true }
sphinx-autodoc-typehints = { version = "^1.19.4", optional = true }
sphinxcontrib-programoutput = { version = "^0.17", optional = true }
numpydoc = { version = "^1.5.0", optional = true }
sphinx_rtd_theme = { version = "^1.0.0", optional = true }

[tool.poetry.extras]
docs = [
  "sphinx",
  "sphinx_rtd_theme",
  "sphinx-autodoc-typehints",
  "numpydoc",
  "sphinxcontrib-programoutput",
]

[tool.poetry.dev-dependencies]
pre-commit = "^3.2.0"
pytest = "^7.2.2"
flake8 = "^5.0.4"
neovim = "^0.3.1"
pydocstyle = "^6.2.3"
pylint = "^2.17.1"
pycodestyle = "^2.9.1"
yapf = "^0.32.0"
vulture = "^2.6"
mypy = "^1.1"
coverage = "^7.2"
interrogate = "^1.5.0"
towncrier = "^22.12.0"
tox = "^4.4.7"
black = { version = "^23.1", allow-prereleases = true }
isort = { version = "^5.11.4", extras = ["pyproject"] }
flake8-bugbear = "^23.3.12"

# typesheds
types-pkg-resources = "^0.1.3"
types-paramiko = "^2.12.0"
types-attrs = "^19.1.0"
types-Jinja2 = "^2.11.9"

[tool.poetry.scripts]
matrixctl = "matrixctl.__main__:main"

[tool.black]
line-length = 79
include = '\.pyi?$'
# exclude __init__.py because of ordered importing
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.mypy]
python_version = 3.10
platform = "linux"
ignore_missing_imports = true
strict_equality = true
strict = true
show_traceback = true
# CI output differs from local
warn_unused_ignores = false # workaround see PR: 308

[[tool.mypy.overrides]]
module = "tests.matrixctl.handlers.*"
allow_untyped_decorators = true       # pytest fixtures

[tool.pyright]
include = ["matrixctl", "tests"]
exclude = ["**/__pycache__"]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"
typeCheckingMode = "basic"

# reportUnknownVariableType ="none"
# reportUnknownMemberType ="none"
# reportUnknownParameterType = "none"
# reportUnknownArgumentType = "none"
# reportUnknownLambdaType = "none"


[tool.isort]
line_length = 79
force_single_line = true
atomic = true
float_to_top = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
use_parentheses = true
skip_glob = [
  "*/setup.py",
  "*.rst",
  "*.md",
  "*.yaml",
  "*.txt",
  "*.yml",
  "*.lock",
  "*.toml",
  "*.ini",
  "Makefile",
  "docs/source/conf.py",
]
filter_files = true
known_first_party = "matrixctl"
known_third_party = [
  "pytest",
  "paramiko",
  "argcomplete",
  "coloredlogs",
  "sphinx_rtd_theme",
  "git",
  "httpx",
  "attr",
  "ansible_runner",
]

[tool.pycln]
all = true

[tool.flake8]
max-line-length = 79
# max-complexity = 12
ignore = "E501"
select = "C,E,F,W,B,B901"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
# ignore-semiprivate = false
# ignore-private = false
# ignore-property-decorators = false
# ignore-module = false
fail-under = 100
exclude = ["setup.py", "docs", "build"]
# ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 1
# quiet = false
# whitelist-regex = []
# color = true


[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["matrixctl"]
sort_by_size = true

[tool.towncrier]
package = "matrixctl"
package_dir = "matrixctl"
filename = "CHANGELOG.rst"
issue_format = "`#{issue} <https://github.com/MichaelSasser/matrixctl/issues/{issue}>`_"
directory = "news/"
top_line = false
# title_format = "{version} ({project_date})"  # {name}
all_bullets = true                      # make all fragments bullet points
wrap = true                             # Wrap text to 79 characters
template = "news/templates/default.rst"

[[tool.towncrier.type]]
directory = "breaking"
name = "Behavior & Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features & Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "docs"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals & Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "trivial"
name = "Trivial Changes"
showcontent = false

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous"
showcontent = true

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.tox]
legacy_tox_ini = """
[pytest]

addopts = -ra
testpaths = tests
xfail_strict = true
filterwarnings =
    once::Warning
    ignore:::pympler[.*]


# Keep docs in sync with docs env and .readthedocs.yml.
# [gh-actions]
# python =
#     3.10: py39, precommit, changelog, docs
# # 3.10: py310


[tox]
envlist = precommit,py310,docs,changelog,
# py310,
isolated_build = True


[testenv]
allowlist_externals = poetry
# Prevent random setuptools/pip breakages like
# https://github.com/pypa/setuptools/issues/1042 from breaking our builds.
setenv =
    VIRTUALENV_NO_DOWNLOAD=1
extras = {env:TOX_AP_TEST_EXTRAS:tests}
commands = poetry run pytest {posargs}


[testenv:py310]
allowlist_externals = poetry
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
basepython = python3.10
install_command = pip install --no-compile {opts} {packages}
setenv =
    PYTHONWARNINGS=d
extras = {env:TOX_AP_TEST_EXTRAS:tests}
commands = poetry run coverage run -m pytest --doctest-modules {posargs}


[testenv:precommit]
allowlist_externals = poetry
basepython = python3.10
skip_install = true
deps =
    pre-commit
passenv = HOMEPATH  # needed on Windows
commands =
    poetry run pre-commit run --all-files


[testenv:docs]
allowlist_externals = poetry
# Keep basepython in sync with gh-actions and .readthedocs.yml.
basepython = python3.10
# extras = docs, func
# currently disable -n
commands =
    poetry run sphinx-build -T -W -b html -d {envtmpdir}/doctrees docs/source docs/build/html


[testenv:changelog]
allowlist_externals = poetry
basepython = python3.10
# deps = towncrier
skip_install = true
commands = poetry run towncrier --draft
"""
