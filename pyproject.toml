[tool.poetry]
name = "matrixctl"
version = "0.12.0-beta.2"
description = "Control, manage, provision and deploy matrix homeservers."

license = "GPL-3.0-or-later"
readme = "README.md"
repository = "https://github.com/MichaelSasser/matrixctl"
homepage = "https://michaelsasser.github.io/matrixctl/index.html"
documentation = "https://michaelsasser.github.io/matrixctl/index.html"
keywords = ['Matrix', 'Synapse', 'Docker']
authors = ["Michael Sasser <Michael@MichaelSasser.org>"]
maintainers = ["Michael Sasser <Michael@MichaelSasser.org>"]
# Look here for all Classifiers:
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Other Audience",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: POSIX",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Utilities",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"
GitPython = "^3.1.31"
coloredlogs = "^15.0.1"
paramiko = "^3.1.0"
"ruamel.yaml" = "^0.17.21"
ansible-runner = "^2.3.2"
attrs = ">=22.2,<24.0"
xdg = "^6.0.0"
Jinja2 = "^3.1.2"
psycopg = "^3.1.8"
httpx = { version = ">=0.23.3,<0.25.0", extras = ["http2"] }
sshtunnel = "^0.4.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"
coverage = "^7.2.2"
pre-commit = "^3.2.1"
tox = "^4.4.8"

[tool.poetry.group.dev.dependencies]
towncrier = "^22.12.0"
flake8 = "^6.0.0"
pylint = "^2.17.1"
yapf = ">=0.32,<0.34"
vulture = "^2.7"
mypy = "^1.1.1"
interrogate = "^1.5.0"
flake8-bugbear = "^23.3.23"
black = { version = "^23.3.0", allow-prereleases = true }
isort = { version = "^5.12.0", extras = ["pyproject"] }

# typesheds
types-pkg-resources = "^0.1.3"
types-paramiko = "^3.0.0.6"
types-attrs = "^19.1.0"
types-Jinja2 = "^2.11.9"
ruff = ">=0.0.260,<0.0.266"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^6.1.3"
sphinx-autodoc-typehints = "^1.22"
sphinxcontrib-programoutput = "^0.17"
numpydoc = "^1.5.0"
sphinx_rtd_theme = "^1.2.0"

[tool.poetry.scripts]
matrixctl = "matrixctl.__main__:main"

[tool.ruff]
line-length = 79
cache-dir = "~/.cache/ruff"
task-tags = ["TODO", "FIXME", "WARN", "SEC", "SECURITY", "INFO", "NOTE"]
# typing-modules = ["airflow.typing_compat"]
fix = true
# respect-gitignore = false
show-fixes = true
ignore-init-module-imports = true
src = ["matrixctl", "docs"]
ignore = ["D202", "TCH003", "TCH001", "ANN401"]
select = [
  "E",  # pycodestyle (Errors)
  "W",  # pycodestyle (Warnings)
  "F",  # pyflakes
  "UP", # pyupgrade
  "D",  # pydocstyle
  # "C",  # mccabe
  "I",   # isort
  "N",   # pep8-naming
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "S",   # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "COM", # flake8-commas
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G",   # flake8-logging-format
  # "INP",  # flake8-no-pep420
  "PIE", # flake8-pie
  # "T20",  # flake8-print
  "PYI", # flake8-pyi
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "TCH", # flake8-type-checking
  # "INT",  # flake8-gettext
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  # "PD",   # pandas-vet
  "PGH", # pygrep-hooks
  "PL",  # Pylint
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "TRY", # tryceratops
  "NPY", # NumPy-specific rules
  "RUF", # Ruff-specific rules
]
# fixable = [
#   "E",  # pycodestyle (Errors)
#   "W",  # pycodestyle (Warnings)
#   "F",  # pyflakes
#   "UP", # pyupgrade
#   "D",  # pydocstyle
#   # "C",  # mccabe
#   "I",  # isort
#   "N",  # pep8-naming
#   "YTT",  # flake8-2020
#   "ANN",  # flake8-annotations
#   "S",    # flake8-bandit
#   "BLE",  # flake8-blind-except
#   "FBT",  # flake8-boolean-trap
#   "B",    # flake8-bugbear
#   "A",    # flake8-builtins
#   "COM",  # flake8-commas
#   "C4",   # flake8-comprehensions
#   "DTZ",  # flake8-datetimez
#   "T10",  # flake8-debugger
#   "EM",   # flake8-errmsg
#   "EXE",  # flake8-executable
#   "ISC",  # flake8-implicit-str-concat
#   "ICN",  # flake8-import-conventions
#   "G",    # flake8-logging-format
#   # "INP",  # flake8-no-pep420
#   "PIE",  # flake8-pie
#   # "T20",  # flake8-print
#   "PYI",  # flake8-pyi
#   "PT",   # flake8-pytest-style
#   "Q",    # flake8-quotes
#   "RSE",  # flake8-raise
#   "RET",  # flake8-return
#   "SLF",  # flake8-self
#   "SIM",  # flake8-simplify
#   "TID",  # flake8-tidy-imports
#   "TCH",  # flake8-type-checking
#   # "INT",  # flake8-gettext
#   "ARG",  # flake8-unused-arguments
#   "PTH",  # flake8-use-pathlib
#   "ERA",  # eradicate
#   # "PD",   # pandas-vet
#   "PGH",  # pygrep-hooks
#   "PL",   # Pylint
#   "PLE",  # Error
#   "PLR",  # Refactor
#   "PLW",  # Warning
#   "TRY",  # tryceratops
#   "NPY",  # NumPy-specific rules
#   "RUF",  # Ruff-specific rules
# ]
exclude = [
  ".git",
  ".mypy_cache",
  ".nox",
  ".pytype",
  ".ruff_cache",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "venv",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py310"


[tool.ruff.flake8-annotations]
# allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-import-conventions]
[tool.ruff.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
typing = "t"


[tool.ruff.isort]
force-single-line = true
lines-after-imports = 2
constants = ["__version__"]
forced-separate = ["tests", "matrixctl"]
required-imports = ["from __future__ import annotations"]
known-first-party = ["matrixctl"]
lines-between-types = 2
known-third-party = [
  "pytest",
  "paramiko",
  "argcomplete",
  "coloredlogs",
  "sphinx_rtd_theme",
  "git",
  "httpx",
  "attr",
  "ansible_runner",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101"]
# "__init__.py" = ["E402"]
# "path/to/file.py" = ["E402"]

[tool.black]
line-length = 79
include = '\.pyi?$'
# exclude __init__.py because of ordered importing
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.mypy]
python_version = "3.11"
platform = "linux"
ignore_missing_imports = true
strict_equality = true
strict = true
show_traceback = true
# CI output differs from local
warn_unused_ignores = false # workaround see PR: 308

[[tool.mypy.overrides]]
module = "tests.matrixctl.handlers.*"
allow_untyped_decorators = true       # pytest fixtures

[tool.pyright]
include = ["matrixctl", "tests"]
exclude = ["**/__pycache__"]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.11"
pythonPlatform = "Linux"
typeCheckingMode = "basic"

# reportUnknownVariableType ="none"
# reportUnknownMemberType ="none"
# reportUnknownParameterType = "none"
# reportUnknownArgumentType = "none"
# reportUnknownLambdaType = "none"


[tool.isort]
line_length = 79
force_single_line = true
atomic = true
float_to_top = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
use_parentheses = true
skip_glob = [
  "*/setup.py",
  "*.rst",
  "*.md",
  "*.yaml",
  "*.txt",
  "*.yml",
  "*.lock",
  "*.toml",
  "*.ini",
  "Makefile",
  "docs/source/conf.py",
]
filter_files = true
known_first_party = "matrixctl"
known_third_party = [
  "pytest",
  "paramiko",
  "argcomplete",
  "coloredlogs",
  "sphinx_rtd_theme",
  "git",
  "httpx",
  "attr",
  "ansible_runner",
]

[tool.pycln]
all = true

[tool.flake8]
max-line-length = 79
# max-complexity = 12
ignore = "E501"
select = "C,E,F,W,B,B901"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
# ignore-semiprivate = false
# ignore-private = false
# ignore-property-decorators = false
# ignore-module = false
fail-under = 100
exclude = ["setup.py", "docs", "build"]
# ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 1
# quiet = false
# whitelist-regex = []
# color = true


[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["matrixctl"]
sort_by_size = true

[tool.towncrier]
package = "matrixctl"
package_dir = "matrixctl"
filename = "CHANGELOG.rst"
issue_format = "`#{issue} <https://github.com/MichaelSasser/matrixctl/issues/{issue}>`_"
directory = "news/"
top_line = false
# title_format = "{version} ({project_date})"  # {name}
all_bullets = true                      # make all fragments bullet points
wrap = true                             # Wrap text to 79 characters
template = "news/templates/default.rst"

[[tool.towncrier.type]]
directory = "breaking"
name = "Behavior & Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features & Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "docs"
name = "Improved Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals & Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "trivial"
name = "Trivial Changes"
showcontent = false

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous"
showcontent = true

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.tox]
legacy_tox_ini = """
[pytest]

addopts = -ra
testpaths = tests
xfail_strict = true
filterwarnings =
    once::Warning
    ignore:::pympler[.*]


# Keep docs in sync with docs env and .readthedocs.yml.
# [gh-actions]
# python =
#     3.10: py39, precommit, changelog, docs
# # 3.10: py310


[tox]
envlist = precommit,py310,py311,docs,changelog,
# py310,
isolated_build = True


[testenv]
allowlist_externals = poetry
# Prevent random setuptools/pip breakages like
# https://github.com/pypa/setuptools/issues/1042 from breaking our builds.
setenv =
    VIRTUALENV_NO_DOWNLOAD=1
extras = {env:TOX_AP_TEST_EXTRAS:tests}
commands =
  poetry install -v
  poetry run coverage run -m pytest --doctest-modules {posargs}

[testenv:precommit]
allowlist_externals = poetry
basepython = python3.11
skip_install = true
deps =
    pre-commit
passenv = HOMEPATH  # needed on Windows
commands =
  poetry install -v
  poetry run pre-commit run --all-files


[testenv:docs]
allowlist_externals = poetry
# Keep basepython in sync with gh-actions and .readthedocs.yml.
basepython = python3.11
# extras = docs, func
# currently disable -n
commands =
  poetry install --with docs -v
  poetry run sphinx-build -T -W -b html -d {envtmpdir}/doctrees docs/source docs/build/html


[testenv:changelog]
allowlist_externals = poetry
basepython = python3.11
# deps = towncrier
skip_install = true
commands =
  poetry install -v
  poetry run towncrier --draft
"""
